# Creating Permanent Tables
Welcome back. You're now in course number two of the data analysts specialization, here's where we get to look at fun concepts like bringing new data into BigQuery and visualizing it. Now, one of the core building blocks of data analysis is creating and running your SQL queries on raw data sources, and then saving those results into new tables that you can access later. Here we'll cover the difference between permanent and temporary data tables and how to store the results of your queries. So far you've queried data sets that have already existed out in the public space and BigQuery, now it's time to create your own and stores new tables permanently for you to access later. A benefit here again is if you had a SQL query and you have these amazing insights and results and you want to store it, you needed to do so in a permanent table or some of the other options that I'm going to show you.

# Temporary Tables and Query Results
Now here's the really mind-blowing part. Even if you don't explicitly save a query as a permanent table by clicking on that save on or specifying a destination table, once you run that query, any and all query, right? Actually BigQuery behind the scenes will store the results of that query in its own anonymous temporary table. The reason why it does that is so we can actually rerun that same query and get the benefit of pulling from query cache, which as you saw on the Wikipedia example in the prior course, and if you're the other queries that we've been executing is extremely fast. Here's the key lesson. All query results again are stored as a temporary or permanent table and it's your choice whether or not before the query runs or after the query runs if you want to store it into that permanent table. But regardless, those results can be stored in a temporary table, and temporary tables would last for about 24 hours.

# Performance Preview: Query Cache
Let's talk a little bit more about query cache. This is magical concept of creating those really fast queries. Now if you have what's called a deterministic query, if at runtime you don't know what the answer is, if you're pulling things like the current timestamp, for example, you can't rely on cache because that's something that's going to be changing depending upon when you're running it. Then naturally that can't be cached. Now naturally, cache is already what we call broken or busted caches busted. When the underlying tables themselves have been updated. If there was a data change to the table, what BigQuery will do is it'll compare the timestamps from when you ran that last query, what was that table last-modified date. If that is seen as changed, then it will automatically be smart enough to not rely on the query cache. It will invalidate their cache, but you can manually do it yourself inside of the options, should you want. Say if you're timing a query for performance reasons, you don't necessarily want to rely on cache, because it may not always be there.

# Creating Logical Views
We talked about permanent tables, temporary tables, and query cache. One of the last topics that we want to cover is actually storing your query as a view. Now, a view, all it is, is you can take your query and you can save it almost like a table, but it reruns that same query that you have on the underlying data source. Now in this section, we covered how you can permanently store the results of your queries into tables. You can then query those tables later. One of the key things to remember is that BigQuery will store the results of all your queries into temporary tables, even if you don't specify anything. These temp tables are around for about 24 hours and they form the basis of query cache. Lastly, we covered views, which are saved queries on top of your existing tables, and you can modify the SQL behind the view at any time. Let's get some practice saving queries into tables and views in our next lab.
